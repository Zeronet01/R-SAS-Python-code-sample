import numpy as np
import SimPy.StatisticalClasses as Stat

class Game:
    def __init__(self, id, prob_head):
        self.id = id
        self.rnd = np.random.RandomState(seed=id)
        self.probHead = prob_head
        self.countWins = 0

    def simulate(self):
        """
        simulates 20 coin tosses and counts the number of times {T, T, H} occurred
        """

        n_consecutive_tails = 0  # number of consecutive tails so far, set to 0

        # flip the coin 20 times
        for i in range(20):

            # find if this flip resulted in head or tail
            if self.rnd.random_sample() < self.probHead:

                # if it is head, check if the last 2 tosses resulted in {T, T}
                if n_consecutive_tails >= 2:
                    # if so, {T, T, H} has occurred
                    self.countWins += 1

                # if this is tail, we set the number of consecutive tails to 0
                n_consecutive_tails = 0

            else:
                # this flip resulted in tail, so we increment the number of consecutive tails by 1
                n_consecutive_tails += 1

    def get_reward(self):
        """
        :return: the reward from this game = 100 * (number of {T, T, H}) - 250
        """
        return 100 * self.countWins - 250


class SetOfGames:
    def __init__(self, id, prob_head, n_games):

        self.gameRewards = []
        self.num_loss = 0  # number of games we lose money
        self.statMeanRewards = None
        self.multiCohortOutcome = MultiCohortOutcomes()
        self.ID = id

        for n in range(n_games):
            # create a new game
            game = Game(id=n*self.ID, prob_head=prob_head)
            # simulate the game with 20 flips
            game.simulate()
            # get the reward
            reward = game.get_reward()
            # store the reward
            self.gameRewards.append(reward)
            # find if we lost in this game
            if reward < 0:
                self.num_loss += 1
        self.statMeanRewards = Stat.SummaryStat(name='Mean survival time',
                                                data=self.gameRewards)

    def get_ave_reward(self):
        """
        :return: the average reward from playing all games
        """
        return sum(self.gameRewards) / len(self.gameRewards)

    def get_reward_PI(self, alpha):
        """ :returns: the prediction interval of the rewards for a specified cohort
               :param alpha: significance level
        """

        stat = Stat.SummaryStat(name='Summary statistics',
                                data=self.gameRewards)

        return stat.get_PI(alpha=alpha)

    def get_reward_CI(self, alpha):
        """ :returns: the confidence interval of the rewards for a specified cohort
               :param alpha: significance level
        """

        stat = Stat.SummaryStat(name='Summary statistics',
                                data=self.gameRewards)
        return stat.get_t_CI(alpha=alpha)

    def get_loss_probability(self):
        """
        :return: the proportion of games that we lost money
        """
        return self.num_loss / len(self.gameRewards)


#Let a cohort represent a set of games
class MultiCohort:

    def __init__(self, ids):

        self.ids = ids
        self.multiCohortOutcomes = MultiCohortOutcomes()

    def simulate(self):
        """ simulates all cohorts """

        for i in range(len(self.ids)):
            # create a cohort
            cohort = SetOfGames(id=self.ids[i],prob_head=0.5, n_games=1000)

            # outcomes from simulating all cohorts
            self.multiCohortOutcomes.extract_outcomes(simulated_cohort=cohort)

        # calculate the summary statistics of from all cohorts
        self.multiCohortOutcomes.calculate_summary_stats()


class MultiCohortOutcomes:
    def __init__(self):

        self.Rewards = []  # two dimensional list of rewards from all simulated cohort
        self.meanRewards = []  # list of average rewards for all simulated cohort
        self.statMeanRewards = None

    def extract_outcomes(self, simulated_cohort):
        """ extracts outcomes of a simulated cohort
        :param simulated_cohort: a cohort after being simulated"""

        # store all rewards from this cohort
        self.Rewards.append(simulated_cohort.gameRewards)

    def calculate_summary_stats(self):
        """
        calculate the summary statistics
        """

        # calculate average rewards for all simulated cohorts
        for obs_set in self.Rewards:
            self.meanRewards.append(sum(obs_set)/len(obs_set))

        # summary statistics of mean rewards
        self.statMeanRewards = Stat.SummaryStat(name='Mean survival time',
                                                     data=self.meanRewards)
